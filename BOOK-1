*COMPUTER HARDWARE*

-motherboard: central piece who connect all the components of the computer 
    -sockets: kind of connector that the CPU processor has to connect with the motherboard
    -buses: connect and move data between components

-Processor: (CPU) is responsible for executing instructions contained in computer programs
    -cores: is responsible for executings instructions (modern CPU may have multiples cores to perform tasks simultaneously)
    -clock Speed: A measure of how many CPU cycles can be performed in a second 
    -context switching: for single core processor the processor share processor time between applications

-RAM: (random access memory) determine the number of actions you can perform at once
    -speed: RAM is fast to read, so data often go into RAM for faster manipulation for the Processor
    -Volatility: The data stored in the RAM is deleted when the computer is shutdown
    -Compatibility DDR# stand for double data rate with the #(3,4,5) meaning the generation. Speed of RAM is measured in MHz
        So, pay  attention of what generation and speed you motherboard is compatible with

-Types of storage: Storage is a components that provides data storage usually a hard drive or a SSD (solid state drive)
    -Size: storage can have a different size usually they are smaller for laptop
    -Capacity: each drive has a maximum capacity (usually drive have a real capacity bellow than their advertised value like 3.8TB for a presumly 4TB of data)
    -Mechanical vs solid state: Mechanical are usually slow and less reliable over long period of time thant Solid state.
        Solid state contains no moving part unlike mechanical and are more reliable and faster than mechanical drive.

-GPU (Graphcs Proccessing Unit), it's kind of processor that excel at number crunching
    -Number crunching: CPU excel at task that involver mathematical operations such a 3D rendering or encryption

-USB: common way of connecting an input device (Universal Serial Bus) their are several generation of USB who can Transfer data with less or more speed

-PS/2: old peripherals support

-Output Devices: devices that accept data from a computer (monitor, printer, etc..)
    -VGA: Old stuff for A/V output
    -DVI: newer than VGA but a bit old today
    -HDMI: more modern and the standar to this day and can also transmit video and audio
    -Display Port: young brother of HDMI
    -USB-C: have a wider ranger of capabilities

-Heat sinks: they are devices who purpose is to move away heat from the critical component

-Power supply: PSU (Power supply unit) are taking power and delivering it to the computer components




*DATA STORAGE AND REPRESENTATION*

-Bits & Bytes: a bit is 0 or 1 it's known as a boolean value with 1 is on and 0 is off. All data in computer are made of bits
    - Byte = 8 bits
    - Kilobytes = 1000 bytes
    -megabyte = 1000 kilobytes
    - gigabyte = 1000 megabytes
    - terabyte = 1000 gigabytes
alternatively:
    - 1 byte = 8 bits
    - 1 kikibyte (KiB) = 1024 bytes
    - 1 mebibyte (MiB) = 1024 kikibytes
    - 1 gibiyte (GiB) = 1024 mebibytes
    - 1 tebibyte (TiB) is 1024 gibibytes


*Alternate Number Base*

Important note: when you talk about binary you use the prefix 0b before the number and when you use hexa, use 0x before the number

-Binary: use base of two
    2⁰ = 1
    2¹ = 2
    2² = 4
    2³ = 8
    2⁴ = 16
    2⁵ = 32
    2⁶ = 64
    2⁷ = 128
    2⁸ = 256
    2⁹ = 512
    and so on... If you have trouble with what a power mean: https://youtu.be/zdu8dII7zRE?feature=shared

    You can use a table to convert from binary to decimal -> please refer to /Images/table_binary_number.png in the repo 
    For decimal to binary just use an online converter tool because convering by hand will take more time than just taking a calculator or an online tool

-Hexadecimal: use base of 16
    Counting in hexadecimal goes like this: 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F
    16⁰ = 1
    16¹ = 16
    16² = 256
    16³ = 4096
    16⁴ = 65536
    Hexadecimal is widely used because you can represent big number quickly as shown above
    Converting from Hexadecimal work pretty much like binary but don't forget A=10, B=11, C=12, D=13, E=14, F=15
    So for 0x2B:
        - 2*16 + 11*1 = 32 + 11 = 43
    Also same as binary to decimal, is faster to use an online converter tool or a calculator for converting

-ASCII
    Ascii table or other like Unicode permits to encode binary number and hexadecimal number to characters that are drawn to the screen
    You can look up on internet or alternatively here -> /Images/ASCII-Table to see what is look like

*ENCODING* : Is a mechanism enabling us to take data in one format and package it into another one 
    -see here -> /Images/encoding_manual for an exemple of encoding and decoding base64 

*FILE HEADERS*
    To really know wich extension is on a file, file headers have often have something called 'magic numbers' or 'magic bytes' or 'file signaturese'
    you can use hexdump on linux with this command: hexdump -C filename | head

    see here for an exemple -> /Images/hexdump_file_header

*LOGIC & and DATA MANIPULATION*

-Boolean logic: 0 is false and 1 is true
-Truth Tables: Show all possible outcomes from inputs 
-Logical AND: check if the Two inouts are both true. If they are both True, the ouput is True, if one or more is False, the ouput will be false
    -Here is the Truth table
    A	B	A and B
    0	0	0
    1	0	0
    0	1	0
    1	1	1

-Logical OR: check if at least one of the inputs are true. If it is then the output is also True
    -Here is the truth table:
    A	B	A OR B
    0	0	0
    1	0	1
    0	1	1
    1	1	1

-Logical NOT: take one input and invert it so 1 become 0 and 0 become 1
    -Here is the truth table:
    A	Not A
    0	1
    1	0

-Logical NAND: Is a AND circuit followed by a NOT circuit
    -Here is the Truth table:
    A	B	A and B	    not (A and B)→ A NAND B 
    0	0	0	        1
    1	0	0	        1
    0	1	0	        1
    1	1	1	        0

-Logical NOR: Is a OR circuit followed by a NOT circuit
    -Here is the Truth Table
    A	B	A OR B	    not (A OR B)→ A NOR B 
    0	0	0	        1
    1	0	1	        0
    0	1	1	        0
    1	1	1	        0

-Logical XOR: Exclusive-OR: check if only one side or the other is true but not Both, if only one input is true, then the ouput is true
    -Here is the Truth table
    A	B	A XOR B
    0	0	0
    1	0	1
    0	1	1
    1	1	0
    By is nature, XOR is used a lot in cryptography
    for exemple:
    1100 XOR 0101 = 1001 you can treat 1100 as you're data, 0101 as you're key and 1001 as you're encrypter data
    and you cans use the key to decrypt you're data:
    1001 XOR 0101 = 1100 

*Storing data and files*

File systems: They are like a protocol to store and access files to the physical storage media, not that the operating system need to understand this protocol
            in order to work. Every storage is broken down in cluster who are determined by the filesystem. For exemple if you have 64kb and you're clusrer has a size of 32kb,
            then, you're 64kb file will take up 2 clusters. Note that even if you store a file that is smaller than 32Kb, it will take an entire cluster
            and the remaining space will be wasted. When you store a file, the disk also store metadata, Which store various information about the file like name and the address where the content
            of the file can be found. If a file is deleted, then the index entry is removed but not the file, that's why you can recover deleted file, if they are not yet been overwritted
            When you secure delete a file, the data is written over the content of the deleted file instead of just marking the cluster as overwritable

Fat32: uses a file allocation table to map each cluster, and doesn't  support file larger than 4GB and doesn't support file permission
        it was commonly used in USB drives

exFAT: designed for removable media, doesn't support permissions, and support much larger files than FAT32

NTFS: used by modern versions of windows, support permissions, encryption and shadow copies and to a certain extent, is capable of healing from data corruption

EXT3: older file system used in Linux, support permissions and encryption, maximum file size of 2TB. Support journaling, this can help recover the drive in the event
    of a disk corruption that might result from a sudden shutdown or jolt

EXT4: modern file system used in linux. support file system encryption, permission big maxmium file size and can turn off the journal and feature a fast disk process

HFS+: file system used in Mac OS X, only for MAC, support encryption, journaling and big file size limit, permission.

APFS: file system used by Apple, support permission and encryption duplicate file can be stored without using additional space and robust file system with security in mind



*CLOUD COMPUTING*

SaaS - Software as a Service: Software that is available via a third party over the internet. It can be installed locally or it can be hosted

Iaas - Infrastructure as a Service: Storage, networking, compute, containers... which you can use to deliver your own applications or services, like buying parts of a data centre

Paas - Platform as a service provide software and hardware designed to enable you to deliver applications and test you're code
    with database pre-made for exemple

Here is a scheme who help you understand the management of cloud computing /Images/saas-vs-paas-vs-iaas

*OPERATING SYSTEM*: Software that run on the computer which maanges how the computer operates
Ex: Ubuntu Linux, Mac OS, Android

Each OS as it own strengths and weaknesses

-Kernel: first part of the OS loaded and has complete control over the computer. Control the computer most sensitive information and functionality it is loaded into a protected region of memory
        to prevent aaccidental or malicious corruption by other programs. It is responsible of the loading of new programs, handling input and output between perpherals, and managing access to the hardware resources
-Process: A serie of actions or step taken in order to achieve a particular end, a process is created on a computer when a program is requested to be loaded
        and contains all the informations needed for execution
-Interrupt: Signal that is sent to CPU, which alerts the CPU to a task requirinf it's immediate attention. An interrupt will halt the CPU and cause it to begin executing the corresponding interrupt handler
    -Hardware Interrupt: interrupt generated by hardware inside or outside of the computer like keyboard or mouse who send interrupt when new input is available.

    -Software Interrupt: Generally, a software use interrupt to act as interface between kernel and the program when opening a file for exemple because the act of opening a file is a privileged operation
                        and the kernel need to be consulted

-Bootloader: program loaded by BIOS when a computer is turned on, and is responsible for loading OS.

-BIOS: program stored on the motherboard. When the computer is first turned on, it is the first program that is loaded and initialized the hardware ready to load the bootloader

-UEFI: Like BIOS but in more versatile and secure manner



*VIRTUALISATION*: create a virtual computer out of software that behave like a separate computer and the "fake hardware" are software and use the ressouces of the computer it is running on.
                This is achieved using a hpervisor

-Host OS: OS that run the virtualisation software

-Guest OS: OS that run inside the Virtual Machine. The guest is separate from the host OS, and can't directly access the ressouces on the host that is useful for malware analysis.

*HYPERVISOR*: layer of code that allow multiple operating systems to share the same hardware ressources.

-Type 2 Hypervisor: Is when the virtualization is done by a software program that run on a OS

-Type 1 Hypervisor: when the virtualization occur at  the firmware level. There is no host operating system. The virtualization software is the host os

virtualisation is heavily used in cloud computing, cybersecurity and programming


*LINUX*: linux is a kernel the OS who used a linux kernel is called a linux distribution

-Linux distribution: com in all shape and sizes, and LInux is and incredibly powerful and customizable OS

-Desktop distribution: Come with a GUI
-Server distribution: Come without a GUI and everything must be done from a terminal.

*Linux Terminal*

when you open the terminal, you see something like this: user@something:~$ -> this is called a prompt and prompting you for input
here, the user account is called user and the hostname of the computer (that is the name that identifiese the computer on network) is something
~ this is a shortand for homefolder for root user it is a #.

-Shell: when you open a terminal, it runs the shell automatically. The shell is responsible for displayinng prompt interpreting the command you type running programs and displaying output
        There are many different shell but the most used is Bash

*Superuser su and sudo*

-Superuser is effectively the administrator account and have the entire control including breaking the system it is usually called root
you can see weihter you are root or no by typing whoami. To log into root type su root and you will get prompted for the password. su -> switch user
you can exit the root session by typing exit

Alternatively you can used a program called sudo if it is installed, it allows temporarily take on the privilege of the root account for a single command
sudo have a configuration file called sudoer which is a list of account that are allowed to use the privileges of the root account. Note that you need to be root to modify the sudoer's file via visudo
you can edit privileges of entire group of user. You can see what group you are part of with the command groups

*Navigation in the Terminal*

-Listing files: ls which stand for listing
                You can use ls -l to see in this order: permissions, user, group, file size, creation timestamp, file/folder name
                You can also pass ls for a specific directory like ls -l Desktop ls -l /home/user/

-Changing directory: cd allows to change directory into a different folder
                    you can go to folder by typing cd Desktop/ and go back to home with cd /home/user or cd ~ or cd .. (this will get you to the directory one level above)
                    to see where you are you can type pwd this will print you're working directory

*Folder structure* you can see the root directory by going to cd / and type ls

-bin: used for storing executable files, usually system files not the one the user installed
-boot: holds the file that Linux uses during boot up process
-cdrom: for the cdrom
-dev: contain a folder and associated files for every hardware component on the system
-etc: usually contain configuration files for installed programs
-home: folder contain the user directory for every user but not for root
-lib: contains shared librairies and kernel modules
-lost+found: if you hard drive has errors and files get lost the orphaned files may get placed here
-media: use for mounting USB keys and floppy disk
-mnt: like media
-opt: any user installed program can  go here if you want
-proc: every running program will have an entry here with associated files
-root: home folder for root user
-run: temporary file system xhich stores runtime information for programs that start early in boot
-sbin: similar to /bin but usually for administratives purposes
-srv: holds data used by services running on the system
-sys: contain information about devices on the system
-tmp: temporary file system and will be deleted periodically
-usr: folder for user controlled files it has is own folder structure which map the root folder
-var: contain system files which tend to increase in size like logs files

*File permissions*

a file or folder is owned by a user and a group when ls -l it's user group
and there are 3 permission mode:
    -r: read file
    -w: writing permission
    -x: execute permission

the first '-' is reserved fir directory, the next 3 '-' are reserved for user permissions, the 3 '-' after are for group permission
and the last 3 '-' are for anyone else

-Setting file permission
you can change permission if you are the owner of the file or using sudo or root
you can change the owner by using the chown command
you can change the group owner by using the command chgrp

you can add a permission by using chmod +(r or w or x) this will add the or these permissions to everyrone
you can remove it by using chmod -(r or w or x)

alternatively you can use numerical number (read = 4, write = 2, execute = 1)
so for setting read en write, chmod 6 (4+2)

You can use this binary table to help you:

R W X
0 0 0

for our example, read and write:

R W X
1 1 0

0b110 = 4 +2 = 6

*Hidden files*
if you want to create a file that is hidden, you need to put a '.' before ex: touch .hiddenfile

you can see it by typing ls -a (a stand for all)

*Environment Variable*
Linux terminal can store data that can be used by programs, this data is ephemral, after you closing the terminal windows, it get back to normal
you can print env variable by using the 'echo' command

echo $HOME
you can modify the env varibale by using export if you want you home for this terminal to be in /tmp
export HOME=/tmp
and if go to cd ~ and pwd you will notice the change

you can print all env variable by typing printenv

-Path

The path tells the terminal where to look for programs you ask for you can see it by typing echo $PATH the list of directory paths are
seprated by a colon (:)

you can ask where a program is installed by typing which program_name for exemple wich ls return /usr/bin/ls
if you use the shell bash for you terminal, you can add a path by adding this at the end of the .bashrc file: export PATH=$PATH:/exemple/of/path

*Previous command*

you can access to last command you typed by pressing the up arrow key or using the reverse search feature by typing crtl + r
you can see the history of commands by cat the file .bash_history if you are using bash or you can use the command history
if you want to remove history you can use history -c or erase entry on .bash_history


